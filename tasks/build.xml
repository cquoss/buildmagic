<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
  <!ENTITY tools      SYSTEM "../tools/etc/buildmagic/tools.ent">
  <!ENTITY defaults   SYSTEM "../tools/etc/buildmagic/defaults.ent">
]>

<!-- $Id$ -->

<!--+======================================================================+-->
<!--| JBoss (The OpenSource J2EE WebOS) Build File                         |-->
<!--|                                                                      |-->
<!--| Distributable under LGPL license.                                    |-->
<!--| See terms of license at http://www.gnu.org.                          |-->
<!--|                                                                      |-->
<!--| This file has been designed to work with the 'tools' module and      |-->
<!--| Buildmagic extentions.                                               |-->
<!--+======================================================================+-->

<project name="Buildmagic/Tasks" default="main" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!--+====================================================================+-->
  <!--| Setup                                                              |-->
  <!--|                                                                    |-->
  <!--| Include the common build elements.                                 |-->
  <!--|                                                                    |-->
  <!--| This defines several different targets, properties and paths.      |-->
  <!--| It also sets up the basic extention tasks amoung other things.     |-->
  <!--+====================================================================+-->

  &buildmagic;
  &defaults;
  &tools;

  <!-- Initialize Ivy Tasks -->
  <path id="ivy.classpath" path="../tools/apache-ivy/ivy-2.0.0-rc2.jar" />
  <typedef resource="org/apache/ivy/ant/antlib.xml"
           uri="antlib:org.apache.ivy.ant"
           classpathref="ivy.classpath" />
  
  <target name="resolve-compile-dependencies" description="Retreive dependencies with ivy">
    <ivy:settings file="../tools/etc/ivy/ivysettings.xml"></ivy:settings>
    <ivy:cachefileset setid="compile-dependencies" conf="compile"/>
    <path id="library.classpath">
      <fileset refid="compile-dependencies"/>
    </path>
  </target>
  
  <target name="resolve-test-dependencies" description="Retreive dependencies with ivy">
    <ivy:settings file="../tools/etc/ivy/ivysettings.xml"></ivy:settings>
    <ivy:cachefileset setid="test-dependencies" conf="test"/>
    <path id="test.dependencies.classpath">
      <fileset refid="test-dependencies"/>
    </path>
  </target>

  <!--+====================================================================+-->
  <!--| Initialization                                                     |-->
  <!--|                                                                    |-->
  <!--| Initialize the build system.  Other targets should depend on       |-->
  <!--| 'init'.                                                            |-->
  <!--+====================================================================+-->

  <target name="init" depends="_buildmagic:init">
    
  </target>


  <!--+====================================================================+-->
  <!--| Configuration                                                      |-->
  <!--|                                                                    |-->
  <!--| This target is invoked by the Buildmagic initialization logic      |-->
  <!--| and should contain module specific configuration elements.         |-->
  <!--+====================================================================+-->

  <target name="configure" unless="configure.disable">

    <!-- Module name(s) & version -->
    <property name="module.name" value="tasks"/>
    <property name="module.Name" value="Buildmagic/Tasks"/>
    
    <!--+================================+-->
    <!--| Library & Module Dependencies. |-->
    <!--+================================+-->
    
    <!-- Configure modules -->
    <!--<path id="jboss.common.root" path="../common"/>
    <property name="jboss.common.root" value="../common"/>-->

    
    <!--<call target="configure-modules"/>
    <path id="dependentmodule.classpath">
      <path refid="jboss.common.classpath"/>
    </path>-->

    <!--+=======================================+-->
    <!--| Override any default properties here. |-->
    <!--+=======================================+-->

    <!-- We need the Ant RT classes -->
    <property name="javac.include.ant.runtime" value="true"/>

    <!-- Configure defaults & build tools -->
    <call target="configure-defaults"/>
    <call target="configure-tools"/>

    <!--+=======================================+-->
    <!--| Define module specific elements here. |-->
    <!--+=======================================+-->

    <!-- Get jboss.home from the environment -->
    <property name="jboss.home" value="${env.JBOSS_HOME}"/>

  </target>


  <!--+====================================================================+-->
  <!--| Compile                                                            |-->
  <!--|                                                                    |-->
  <!--| This target should depend on other compile-* targets for each      |-->
  <!--| different type of compile that needs to be performed, short of     |-->
  <!--| documentation compiles.                                            |-->
  <!--+====================================================================+-->

  <target name="compile"
	  description="Compile all source files."
	  depends="resolve-compile-dependencies,
                   _default:compile-classes,
                   _default:compile-etc,
                   _default:compile-resources">
    <!-- Add module specific elements here. -->
  </target>

  <!--+====================================================================+-->
  <!--| Test                                                               |-->
  <!--|                                                                    |-->
  <!--| Run unit tests                                                     |-->
  <!--+====================================================================+-->

  <target name="test"
	  description="Run junit tests."
	  depends="compile, resolve-test-dependencies">
    
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.reports}"/>
    
    <javac srcdir="${source.test}"
         destdir="${build.test}"
         debug="on">
      <classpath>
        <pathelement location="${build.classes}"/>
        <path refid="test.dependencies.classpath"/>
      </classpath>
    </javac>
    
    <junit printsummary="yes" haltonfailure="yes">
      <classpath>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.classes}"/>
        <path refid="test.dependencies.classpath"/>
      </classpath>

      <formatter type="plain"/>

      <!--<test name="my.test.TestCase" haltonfailure="no" outfile="result">
        <formatter type="xml"/>
      </test>-->

      <batchtest fork="yes" todir="${build.reports}">
        <fileset dir="${source.test}">
          <include name="**/*Test*.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--+====================================================================+-->
  <!--| Generate Output                                                    |-->
  <!--|                                                                    |-->
  <!--| Generates the target output for this module. Target output is      |-->
  <!--| the output which is ment to be released or used by external        |-->
  <!--| modules.                                                           |-->
  <!--+====================================================================+-->

  <target name="output"
	  description="Generate all target output."
	  depends="compile, test">

    <mkdir dir="${build.lib}"/>

    <!-- buildmagic-tasks.jar -->
    <jar jarfile="${build.lib}/buildmagic-tasks.jar" manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="**"/>
      </fileset>
      <fileset dir="${build.resources}">
        <include name="**/antlib.xml"/>
      </fileset>

    </jar>
    
    <property name="dist.root" location="output/buildmagic"/>
    <mkdir dir="${dist.root}/lib"/>
    <copy file="${build.lib}/buildmagic-tasks.jar" tofile="${dist.root}/lib/buildmagic-tasks.jar"/>
    
    <ivy:retrieve pattern="${dist.root}/lib/[artifact]-[revision].[ext]" conf="compile"/>
    
    <mkdir dir="${dist.root}/etc"/>
    <copy todir="${dist.root}/etc">
      <fileset dir="${source.resources}"/>
    </copy>
    
  </target>

  <!--+====================================================================+-->
  <!--| Integration Tests                                                  |-->
  <!--|                                                                    |-->
  <!--| Test build magic against some sample projects.                     |-->
  <!--+====================================================================+-->

  <target name="integration-tests" depends="output"
	  description="Run the integration tests.">
    
    <echo>
      Running Integration Tests
    </echo>
    <property name="output.it" location="output/it"/>
    
    <mkdir dir="${output.it}"/>
    <copy todir="${output.it}">
      <fileset dir="src/it"/>
    </copy>
    
    <run-it dir="simple-build">
      <failure-conditions>
        <not>
          <available file="${output.it}/simple-build/module2/output"/>
        </not>
      </failure-conditions>
    </run-it>
    
    <run-it dir="simple-external-build">
      <failure-conditions>
        <available file="${output.it}/simple-external-build/module1/output"/>
        <not>
          <available file="${output.it}/simple-external-build/module2/output"/>
        </not>
      </failure-conditions>
    </run-it>
    
    <echo>
      End Integration Tests
    </echo>
    
  </target>


  <!--+====================================================================+-->
  <!--| Misc.                                                              |-->
  <!--|                                                                    |-->
  <!--| Standard targets and psuedo-targets.                               |-->
  <!--+====================================================================+-->

  <target name="clean" depends="_buildmagic:clean">
    <!-- Add module specific elements here. -->
  </target>

  <target name="clobber" depends="_buildmagic:clobber">
    <!-- Add module specific elements here. -->
  </target>

  <!-- main, all, most and help are primary psuedo-targets -->
  <target name="main" depends="most"/>
  <target name="all"/>
  <target name="most" depends="output"/>
  <target name="help"/>

  <!--+====================================================================+-->
  <!--| Macro Definitions                                                  |-->
  <!--|                                                                    |-->
  <!--| Some useful macros.                                                |-->
  <!--+====================================================================+-->

  <macrodef name="run-it">
    <attribute name="dir"/>
    <element name="failure-conditions" optional="yes"/>
    <sequential>
      <mkdir dir="${output.it}/@{dir}/tools/buildmagic"/>
      <copy todir="${output.it}/@{dir}/tools/buildmagic">
        <fileset dir="${dist.root}"/>
      </copy>
      
      <!-- Clean the IT project -->
      <exec executable="ant" dir="${output.it}/@{dir}/build/"
        output="${output.it}/@{dir}/buildlog.txt" resultproperty="@{dir}-clean-result">
        <arg line="clean"/>
      </exec>
      
      <property name="test.deps.classpath" refid="test.dependencies.classpath"/>
      <!-- Run the IT project -->
      <exec executable="ant" dir="${output.it}/@{dir}/build/"
        output="${output.it}/@{dir}/buildlog.txt" resultproperty="@{dir}-build-result">
        <arg line="-lib ${test.deps.classpath}"/>
      </exec>
      
      <fail message="Test @{dir} failed.  For more information, see ${output.it}/@{dir}/buildlog.txt">
        <condition>
          <or>
            <not>
              <equals arg1="${@{dir}-clean-result}" arg2="0" trim="true"/>
            </not>
            <not>
              <equals arg1="${@{dir}-build-result}" arg2="0" trim="true"/>
            </not>
            <failure-conditions/>
          </or>
        </condition>
      </fail>
      <echo message="Successful completion of test: @{dir}"/>
    </sequential>
  </macrodef>
  
</project>
